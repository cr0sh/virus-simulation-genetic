from random import random
class analyzer:
    def __init__(self):
        self.dmg = {0: {0: 1, 1: 0, 2: 7, 3: 5, 4: 9, 5: 5, 6: 2, 7: 3, 8: 4, 9: 7, 10: 3, 11: 0, 12: 7, 13: 7, 14: 0, 15: 14}, 1: {0: 12, 1: 9, 2: 14, 3: 0, 4: 4, 5: 2, 6: 0, 7: 14, 8: 1, 9: 2, 10: 6, 11: 9, 12: 7, 13: 0, 14: 3, 15: 9}, 2: {0: 5, 1: 11, 2: 11, 3: 15, 4: 6, 5: 5, 6: 7, 7: 0, 8: 6, 9: 15, 10: 0, 11: 6, 12: 15, 13: 0, 14: 4, 15: 14}, 3: {0: 0, 1: 2, 2: 0, 3: 12, 4: 12, 5: 12, 6: 4, 7: 6, 8: 13, 9: 1, 10: 0, 11: 3, 12: 5, 13: 13, 14: 2, 15: 10}, 4: {0: 1, 1: 6, 2: 10, 3: 15, 4: 3, 5: 0, 6: 4, 7: 9, 8: 13, 9: 15, 10: 8, 11: 0, 12: 10, 13: 10, 14: 7, 15: 0}, 5: {0: 2, 1: 6, 2: 10, 3: 6, 4: 0, 5: 1, 6: 11, 7: 4, 8: 5, 9: 9, 10: 0, 11: 11, 12: 5, 13: 8, 14: 15, 15: 0}, 6: {0: 8, 1: 8, 2: 0, 3: 0, 4: 9, 5: 6, 6: 10, 7: 5, 8: 2, 9: 11, 10: 6, 11: 7, 12: 14, 13: 15, 14: 0, 15: 2}, 7: {0: 1, 1: 13, 2: 7, 3: 6, 4: 4, 5: 9, 6: 14, 7: 4, 8: 0, 9: 0, 10: 2, 11: 5, 12: 9, 13: 10, 14: 0, 15: 10}, 8: {0: 0, 1: 2, 2: 1, 3: 12, 4: 8, 5: 3, 6: 6, 7: 14, 8: 12, 9: 10, 10: 14, 11: 0, 12: 6, 13: 0, 14: 5, 15: 7}, 9: {0: 15, 1: 2, 2: 0, 3: 4, 4: 7, 5: 3, 6: 4, 7: 1, 8: 7, 9: 0, 10: 13, 11: 12, 12: 15, 13: 0, 14: 5, 15: 8}, 10: {0: 13, 1: 0, 2: 2, 3: 14, 4: 0, 5: 6, 6: 0, 7: 8, 8: 11, 9: 15, 10: 13, 11: 7, 12: 10, 13: 4, 14: 6, 15: 4}, 11: {0: 2, 1: 1, 2: 0, 3: 8, 4: 0, 5: 7, 6: 15, 7: 3, 8: 1, 9: 10, 10: 11, 11: 11, 12: 1, 13: 2, 14: 0, 15: 2}, 12: {0: 6, 1: 0, 2: 0, 3: 15, 4: 15, 5: 9, 6: 1, 7: 14, 8: 8, 9: 14, 10: 13, 11: 3, 12: 8, 13: 8, 14: 0, 15: 13}, 13: {0: 12, 1: 4, 2: 0, 3: 11, 4: 0, 5: 2, 6: 7, 7: 5, 8: 2, 9: 0, 10: 4, 11: 13, 12: 10, 13: 4, 14: 14, 15: 4}, 14: {0: 13, 1: 3, 2: 12, 3: 0, 4: 13, 5: 1, 6: 8, 7: 7, 8: 2, 9: 13, 10: 10, 11: 10, 12: 0, 13: 11, 14: 0, 15: 5}, 15: {0: 4, 1: 10, 2: 0, 3: 3, 4: 8, 5: 11, 6: 5, 7: 6, 8: 3, 9: 0, 10: 9, 11: 0, 12: 2, 13: 2, 14: 8, 15: 14}}

    def get(self, *args):
        if len(args) < 2:
            return self.dmg[args[0]]
        else:
            return self.dmg[args[0]][args[1]]

    def battle(self, atk, def_):
        dmg = 0
        for id_, ga in enumerate(atk):
            for gd in def_[id_*4:id_*4+4]:
                try:
                    dmg += self.dmg[ga][gd]
                except KeyError:
                    print(atk, def_)

        return dmg

    def print_(self):
        print('   0 1 2 3 4 5 6 7 8 9 a b c d e f\n')
        for i in range(16):
            buf = str(hex(i)[2:]) + '  '
            for ii in range(16):
                buf += (hex(self.dmg[i][ii])[2:] + ' ')

            buf = buf[:len(buf) - 1]
            print(buf)

    def rawprint(self):
        print('\n'.join(map(lambda x: ''.join(''.join(map(lambda y: hex(self.dmg[x][y])[2:], range(16)))), range(16))))

if __name__ == "__main__":
    test = analyzer()
    test.print_()
    test.rawprint()
    dmg = 0
    print(test.dmg)
    for i in range(1000):
        test = analyzer(3)
        dmg += test.battle(list(map(lambda x: hex(int(random()*16))[2:], range(4))), list(map(lambda x: hex(int(random()*16))[2:], range(16)))) #서열을 달리해도 무작위성에 의해 평균 피해량 동일

    print(dmg/1000) #평균 104
